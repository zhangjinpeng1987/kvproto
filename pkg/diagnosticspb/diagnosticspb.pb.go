// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: diagnosticspb.proto

package diagnosticspb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogLevel int32

const (
	LogLevel_ALL      LogLevel = 0
	LogLevel_Debug    LogLevel = 1
	LogLevel_Info     LogLevel = 2
	LogLevel_Warn     LogLevel = 3
	LogLevel_Trace    LogLevel = 4
	LogLevel_Critical LogLevel = 5
	LogLevel_Error    LogLevel = 6
)

var LogLevel_name = map[int32]string{
	0: "ALL",
	1: "Debug",
	2: "Info",
	3: "Warn",
	4: "Trace",
	5: "Critical",
	6: "Error",
}
var LogLevel_value = map[string]int32{
	"ALL":      0,
	"Debug":    1,
	"Info":     2,
	"Warn":     3,
	"Trace":    4,
	"Critical": 5,
	"Error":    6,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{0}
}

type ServerInfoType int32

const (
	ServerInfoType_All          ServerInfoType = 0
	ServerInfoType_HardwareInfo ServerInfoType = 1
	ServerInfoType_SystemInfo   ServerInfoType = 2
	ServerInfoType_LoadInfo     ServerInfoType = 3
)

var ServerInfoType_name = map[int32]string{
	0: "All",
	1: "HardwareInfo",
	2: "SystemInfo",
	3: "LoadInfo",
}
var ServerInfoType_value = map[string]int32{
	"All":          0,
	"HardwareInfo": 1,
	"SystemInfo":   2,
	"LoadInfo":     3,
}

func (x ServerInfoType) String() string {
	return proto.EnumName(ServerInfoType_name, int32(x))
}
func (ServerInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{1}
}

type SearchLogRequest struct {
	StartTime            int64    `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64    `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Level                LogLevel `protobuf:"varint,3,opt,name=level,proto3,enum=diagnosticspb.LogLevel" json:"level,omitempty"`
	Pattern              string   `protobuf:"bytes,4,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Limit                int64    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchLogRequest) Reset()         { *m = SearchLogRequest{} }
func (m *SearchLogRequest) String() string { return proto.CompactTextString(m) }
func (*SearchLogRequest) ProtoMessage()    {}
func (*SearchLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{0}
}
func (m *SearchLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchLogRequest.Merge(dst, src)
}
func (m *SearchLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchLogRequest proto.InternalMessageInfo

func (m *SearchLogRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SearchLogRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SearchLogRequest) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LogLevel_ALL
}

func (m *SearchLogRequest) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *SearchLogRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchLogResponse struct {
	Messages             []*LogMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SearchLogResponse) Reset()         { *m = SearchLogResponse{} }
func (m *SearchLogResponse) String() string { return proto.CompactTextString(m) }
func (*SearchLogResponse) ProtoMessage()    {}
func (*SearchLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{1}
}
func (m *SearchLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchLogResponse.Merge(dst, src)
}
func (m *SearchLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchLogResponse proto.InternalMessageInfo

func (m *SearchLogResponse) GetMessages() []*LogMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type LogMessage struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Level                LogLevel `protobuf:"varint,2,opt,name=level,proto3,enum=diagnosticspb.LogLevel" json:"level,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{2}
}
func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(dst, src)
}
func (m *LogMessage) XXX_Size() int {
	return m.Size()
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogMessage) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LogLevel_ALL
}

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ServerInfoRequest struct {
	Tp                   ServerInfoType `protobuf:"varint,1,opt,name=tp,proto3,enum=diagnosticspb.ServerInfoType" json:"tp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServerInfoRequest) Reset()         { *m = ServerInfoRequest{} }
func (m *ServerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ServerInfoRequest) ProtoMessage()    {}
func (*ServerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{3}
}
func (m *ServerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoRequest.Merge(dst, src)
}
func (m *ServerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoRequest proto.InternalMessageInfo

func (m *ServerInfoRequest) GetTp() ServerInfoType {
	if m != nil {
		return m.Tp
	}
	return ServerInfoType_All
}

type ServerInfoPair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerInfoPair) Reset()         { *m = ServerInfoPair{} }
func (m *ServerInfoPair) String() string { return proto.CompactTextString(m) }
func (*ServerInfoPair) ProtoMessage()    {}
func (*ServerInfoPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{4}
}
func (m *ServerInfoPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfoPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfoPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerInfoPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoPair.Merge(dst, src)
}
func (m *ServerInfoPair) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfoPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoPair.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoPair proto.InternalMessageInfo

func (m *ServerInfoPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ServerInfoPair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ServerInfoItem struct {
	// cpu, memory, disk, network ...
	Tp string `protobuf:"bytes,1,opt,name=tp,proto3" json:"tp,omitempty"`
	// eg. network: lo1/eth0, cpu: core1/core2, disk: sda1/sda2
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// all key-value pairs for specified item, e.g:
	// ServerInfoItem {
	//     tp = "network"
	//     name = "eth0"
	//     paris = [
	//         ServerInfoPair { key = "readbytes", value = "4k"},
	//         ServerInfoPair { key = "writebytes", value = "1k"},
	//     ]
	// }
	Pairs                []*ServerInfoPair `protobuf:"bytes,3,rep,name=pairs" json:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServerInfoItem) Reset()         { *m = ServerInfoItem{} }
func (m *ServerInfoItem) String() string { return proto.CompactTextString(m) }
func (*ServerInfoItem) ProtoMessage()    {}
func (*ServerInfoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{5}
}
func (m *ServerInfoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerInfoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoItem.Merge(dst, src)
}
func (m *ServerInfoItem) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoItem.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoItem proto.InternalMessageInfo

func (m *ServerInfoItem) GetTp() string {
	if m != nil {
		return m.Tp
	}
	return ""
}

func (m *ServerInfoItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServerInfoItem) GetPairs() []*ServerInfoPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type ServerInfoResponse struct {
	Items                []*ServerInfoItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServerInfoResponse) Reset()         { *m = ServerInfoResponse{} }
func (m *ServerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ServerInfoResponse) ProtoMessage()    {}
func (*ServerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_diagnosticspb_d13775230cc70742, []int{6}
}
func (m *ServerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoResponse.Merge(dst, src)
}
func (m *ServerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoResponse proto.InternalMessageInfo

func (m *ServerInfoResponse) GetItems() []*ServerInfoItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchLogRequest)(nil), "diagnosticspb.SearchLogRequest")
	proto.RegisterType((*SearchLogResponse)(nil), "diagnosticspb.SearchLogResponse")
	proto.RegisterType((*LogMessage)(nil), "diagnosticspb.LogMessage")
	proto.RegisterType((*ServerInfoRequest)(nil), "diagnosticspb.ServerInfoRequest")
	proto.RegisterType((*ServerInfoPair)(nil), "diagnosticspb.ServerInfoPair")
	proto.RegisterType((*ServerInfoItem)(nil), "diagnosticspb.ServerInfoItem")
	proto.RegisterType((*ServerInfoResponse)(nil), "diagnosticspb.ServerInfoResponse")
	proto.RegisterEnum("diagnosticspb.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterEnum("diagnosticspb.ServerInfoType", ServerInfoType_name, ServerInfoType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Diagnostics service

type DiagnosticsClient interface {
	// Searchs log in the target node
	SearchLog(ctx context.Context, in *SearchLogRequest, opts ...grpc.CallOption) (*SearchLogResponse, error)
	// Retrieves server info in the target node
	ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
}

type diagnosticsClient struct {
	cc *grpc.ClientConn
}

func NewDiagnosticsClient(cc *grpc.ClientConn) DiagnosticsClient {
	return &diagnosticsClient{cc}
}

func (c *diagnosticsClient) SearchLog(ctx context.Context, in *SearchLogRequest, opts ...grpc.CallOption) (*SearchLogResponse, error) {
	out := new(SearchLogResponse)
	err := c.cc.Invoke(ctx, "/diagnosticspb.Diagnostics/search_log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticsClient) ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	out := new(ServerInfoResponse)
	err := c.cc.Invoke(ctx, "/diagnosticspb.Diagnostics/server_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Diagnostics service

type DiagnosticsServer interface {
	// Searchs log in the target node
	SearchLog(context.Context, *SearchLogRequest) (*SearchLogResponse, error)
	// Retrieves server info in the target node
	ServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
}

func RegisterDiagnosticsServer(s *grpc.Server, srv DiagnosticsServer) {
	s.RegisterService(&_Diagnostics_serviceDesc, srv)
}

func _Diagnostics_SearchLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServer).SearchLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosticspb.Diagnostics/SearchLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServer).SearchLog(ctx, req.(*SearchLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diagnostics_ServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServer).ServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosticspb.Diagnostics/ServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServer).ServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Diagnostics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diagnosticspb.Diagnostics",
	HandlerType: (*DiagnosticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "search_log",
			Handler:    _Diagnostics_SearchLog_Handler,
		},
		{
			MethodName: "server_info",
			Handler:    _Diagnostics_ServerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diagnosticspb.proto",
}

func (m *SearchLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchLogRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(m.EndTime))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(m.Level))
	}
	if len(m.Pattern) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchLogResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnosticspb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(m.Time))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(m.Level))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(m.Tp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerInfoPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerInfoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(len(m.Tp)))
		i += copy(dAtA[i:], m.Tp)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDiagnosticspb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Pairs) > 0 {
		for _, msg := range m.Pairs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDiagnosticspb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnosticspb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDiagnosticspb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SearchLogRequest) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovDiagnosticspb(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovDiagnosticspb(uint64(m.EndTime))
	}
	if m.Level != 0 {
		n += 1 + sovDiagnosticspb(uint64(m.Level))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovDiagnosticspb(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovDiagnosticspb(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchLogResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovDiagnosticspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogMessage) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovDiagnosticspb(uint64(m.Time))
	}
	if m.Level != 0 {
		n += 1 + sovDiagnosticspb(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDiagnosticspb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfoRequest) Size() (n int) {
	var l int
	_ = l
	if m.Tp != 0 {
		n += 1 + sovDiagnosticspb(uint64(m.Tp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfoPair) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDiagnosticspb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDiagnosticspb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfoItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tp)
	if l > 0 {
		n += 1 + l + sovDiagnosticspb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDiagnosticspb(uint64(l))
	}
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovDiagnosticspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfoResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDiagnosticspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDiagnosticspb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDiagnosticspb(x uint64) (n int) {
	return sovDiagnosticspb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (LogLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnosticspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &LogMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnosticspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (LogLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnosticspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (ServerInfoType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnosticspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnosticspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, &ServerInfoPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnosticspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ServerInfoItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnosticspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnosticspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiagnosticspb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiagnosticspb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiagnosticspb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDiagnosticspb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiagnosticspb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiagnosticspb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiagnosticspb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiagnosticspb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("diagnosticspb.proto", fileDescriptor_diagnosticspb_d13775230cc70742) }

var fileDescriptor_diagnosticspb_d13775230cc70742 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0x71, 0x6b, 0xdf, 0xf6, 0xcb, 0x37, 0x0c, 0x95, 0x70, 0x2b, 0x35, 0x18, 0x2f,
	0x50, 0x54, 0xa9, 0x41, 0x4a, 0x85, 0xc4, 0x96, 0x52, 0x24, 0x82, 0x82, 0x04, 0x6e, 0x04, 0xcb,
	0x6a, 0x92, 0x4c, 0xcd, 0x28, 0xb6, 0xc7, 0xcc, 0x4c, 0x82, 0xf2, 0x26, 0x3c, 0x02, 0x12, 0x7b,
	0x9e, 0x81, 0x25, 0x4b, 0x96, 0x28, 0xbc, 0x08, 0x9a, 0x71, 0xdc, 0x24, 0x54, 0x41, 0xac, 0x7c,
	0x7f, 0xce, 0x9c, 0x7b, 0xcf, 0x19, 0xdb, 0x70, 0x77, 0xcc, 0x69, 0x92, 0x0b, 0xa5, 0xf9, 0x48,
	0x15, 0xc3, 0x4e, 0x21, 0x85, 0x16, 0xe4, 0xbf, 0x8d, 0xe2, 0xd1, 0x41, 0x22, 0x12, 0x61, 0x3b,
	0x8f, 0x4c, 0x54, 0x82, 0x8e, 0xfe, 0x97, 0x53, 0xa5, 0x6d, 0x58, 0x16, 0xa2, 0x2f, 0x08, 0xf0,
	0x25, 0xa3, 0x72, 0xf4, 0xbe, 0x2f, 0x92, 0x98, 0x7d, 0x98, 0x32, 0xa5, 0xc9, 0x31, 0x80, 0xd2,
	0x54, 0xea, 0x2b, 0xcd, 0x33, 0x16, 0xa0, 0x10, 0xb5, 0x9d, 0xd8, 0xb7, 0x95, 0x01, 0xcf, 0x18,
	0x39, 0x04, 0x8f, 0xe5, 0xe3, 0xb2, 0x59, 0xb7, 0xcd, 0x5d, 0x96, 0x8f, 0x6d, 0xeb, 0x14, 0xdc,
	0x94, 0xcd, 0x58, 0x1a, 0x38, 0x21, 0x6a, 0x37, 0xbb, 0xf7, 0x3a, 0x9b, 0x9b, 0xf6, 0x45, 0xd2,
	0x37, 0xed, 0xb8, 0x44, 0x91, 0x00, 0x76, 0x0b, 0xaa, 0x35, 0x93, 0x79, 0xd0, 0x08, 0x51, 0xdb,
	0x8f, 0xab, 0x94, 0x1c, 0x80, 0x9b, 0xf2, 0x8c, 0xeb, 0xc0, 0xb5, 0x03, 0xca, 0x24, 0x7a, 0x09,
	0x77, 0xd6, 0x96, 0x55, 0x85, 0xc8, 0x15, 0x23, 0x8f, 0xc1, 0xcb, 0x98, 0x52, 0x34, 0x61, 0x2a,
	0x40, 0xa1, 0xd3, 0xde, 0xeb, 0x1e, 0xde, 0x1e, 0xfb, 0xaa, 0x44, 0xc4, 0x37, 0xd0, 0x88, 0x03,
	0xac, 0xea, 0x84, 0x40, 0x63, 0x4d, 0xac, 0x8d, 0x57, 0x62, 0xea, 0xff, 0x2a, 0x66, 0x49, 0x6e,
	0xd5, 0xfb, 0x71, 0x95, 0x46, 0xe7, 0x66, 0x6d, 0x39, 0x63, 0xb2, 0x97, 0x5f, 0x8b, 0xca, 0xe4,
	0x53, 0xa8, 0xeb, 0xc2, 0xce, 0x6b, 0x76, 0x8f, 0xff, 0xa0, 0x5e, 0xa1, 0x07, 0xf3, 0x82, 0xc5,
	0x75, 0x5d, 0x44, 0x4f, 0xa0, 0xb9, 0xaa, 0xbe, 0xa6, 0x5c, 0x12, 0x0c, 0xce, 0x84, 0xcd, 0x2d,
	0x83, 0x1f, 0x9b, 0xd0, 0x98, 0x36, 0xa3, 0xe9, 0xb4, 0xbc, 0x15, 0x3f, 0x2e, 0x93, 0x88, 0xaf,
	0x9f, 0xec, 0x69, 0x96, 0x91, 0xe6, 0xcd, 0x68, 0xdf, 0x70, 0x1b, 0xf1, 0x39, 0xcd, 0xaa, 0x63,
	0x36, 0x26, 0x67, 0xe0, 0x16, 0x94, 0x4b, 0x15, 0x38, 0xd6, 0xd2, 0xed, 0x1b, 0x9a, 0x5d, 0xe2,
	0x12, 0x1b, 0xf5, 0x80, 0xac, 0x0b, 0x5d, 0x5e, 0xd0, 0x19, 0xb8, 0x5c, 0xb3, 0xac, 0xba, 0x9d,
	0xed, 0x54, 0x66, 0xb9, 0xb8, 0xc4, 0x9e, 0xbc, 0x05, 0xaf, 0x32, 0x98, 0xec, 0x82, 0xf3, 0xb4,
	0xdf, 0xc7, 0x35, 0xe2, 0x83, 0x7b, 0xc1, 0x86, 0xd3, 0x04, 0x23, 0xe2, 0x41, 0xc3, 0x1c, 0xc1,
	0x75, 0x13, 0xbd, 0xa3, 0x32, 0xc7, 0x8e, 0x69, 0x0f, 0x24, 0x1d, 0x31, 0xdc, 0x20, 0xfb, 0xe0,
	0x3d, 0x93, 0x5c, 0xf3, 0x11, 0x4d, 0xb1, 0x6b, 0x1a, 0xcf, 0xa5, 0x14, 0x12, 0xef, 0x9c, 0xf4,
	0xd6, 0xdd, 0x30, 0xee, 0x5a, 0xf6, 0x34, 0xc5, 0x35, 0x82, 0x61, 0xff, 0x05, 0x95, 0xe3, 0x8f,
	0x54, 0x32, 0x4b, 0x8d, 0x48, 0x13, 0xe0, 0x72, 0xae, 0x34, 0xcb, 0x96, 0xa3, 0xf6, 0xcd, 0x52,
	0x74, 0x6c, 0x33, 0xa7, 0xfb, 0x15, 0xc1, 0xde, 0xc5, 0x4a, 0x0a, 0x79, 0x03, 0xa0, 0xec, 0xdb,
	0x79, 0x95, 0x8a, 0x84, 0xdc, 0xbf, 0x25, 0x73, 0xf3, 0x2b, 0x3b, 0x0a, 0xb7, 0x03, 0x4a, 0xe3,
	0xa2, 0x1a, 0x19, 0xc0, 0x9e, 0xb2, 0xdb, 0x5e, 0xf1, 0xfc, 0x5a, 0x90, 0x70, 0xab, 0x75, 0x15,
	0xe9, 0x83, 0xbf, 0x20, 0x2a, 0xd6, 0xf3, 0x87, 0x3f, 0x3e, 0x7b, 0xe8, 0xdb, 0xa2, 0x85, 0xbe,
	0x2f, 0x5a, 0xe8, 0xe7, 0xa2, 0x85, 0x3e, 0xfd, 0x6a, 0xd5, 0x00, 0x0b, 0x99, 0x74, 0x34, 0x9f,
	0xcc, 0x3a, 0x93, 0x99, 0xfd, 0x39, 0x0c, 0x77, 0xec, 0xe3, 0xec, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0x90, 0xbd, 0xca, 0x70, 0x04, 0x00, 0x00,
}
