// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsRequest {
    // message fields
    pub requests: ::protobuf::RepeatedField<BatchCommandsRequest_Request>,
    pub request_ids: ::std::vec::Vec<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BatchCommandsRequest {
    pub fn new() -> BatchCommandsRequest {
        ::std::default::Default::default()
    }

    // repeated .tikvpb.BatchCommandsRequest.Request requests = 1;

    pub fn clear_requests(&mut self) {
        self.requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: ::protobuf::RepeatedField<BatchCommandsRequest_Request>) {
        self.requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requests(&mut self) -> &mut ::protobuf::RepeatedField<BatchCommandsRequest_Request> {
        &mut self.requests
    }

    // Take field
    pub fn take_requests(&mut self) -> ::protobuf::RepeatedField<BatchCommandsRequest_Request> {
        ::std::mem::replace(&mut self.requests, ::protobuf::RepeatedField::new())
    }

    pub fn get_requests(&self) -> &[BatchCommandsRequest_Request] {
        &self.requests
    }

    // repeated uint64 request_ids = 2;

    pub fn clear_request_ids(&mut self) {
        self.request_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.request_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.request_ids
    }

    // Take field
    pub fn take_request_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.request_ids, ::std::vec::Vec::new())
    }

    pub fn get_request_ids(&self) -> &[u64] {
        &self.request_ids
    }
}

impl ::protobuf::Message for BatchCommandsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.requests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requests)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.request_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.request_ids {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.requests {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.request_ids {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsRequest {
        BatchCommandsRequest::new()
    }

    fn default_instance() -> &'static BatchCommandsRequest {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsRequest,
        };
        unsafe {
            instance.get(BatchCommandsRequest::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsRequest {
    fn clear(&mut self) {
        self.clear_requests();
        self.clear_request_ids();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BatchCommandsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.requests, "requests", buf);
        crate::text::PbPrint::fmt(&self.request_ids, "request_ids", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.requests, "requests", &mut s);
        crate::text::PbPrint::fmt(&self.request_ids, "request_ids", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsRequest_Request {
    // message oneof groups
    pub cmd: ::std::option::Option<BatchCommandsRequest_Request_oneof_cmd>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum BatchCommandsRequest_Request_oneof_cmd {
    Get(super::kvrpcpb::GetRequest),
    Scan(super::kvrpcpb::ScanRequest),
    Prewrite(super::kvrpcpb::PrewriteRequest),
    Commit(super::kvrpcpb::CommitRequest),
    Import(super::kvrpcpb::ImportRequest),
    Cleanup(super::kvrpcpb::CleanupRequest),
    BatchGet(super::kvrpcpb::BatchGetRequest),
    BatchRollback(super::kvrpcpb::BatchRollbackRequest),
    ScanLock(super::kvrpcpb::ScanLockRequest),
    ResolveLock(super::kvrpcpb::ResolveLockRequest),
    GC(super::kvrpcpb::GCRequest),
    DeleteRange(super::kvrpcpb::DeleteRangeRequest),
    RawGet(super::kvrpcpb::RawGetRequest),
    RawBatchGet(super::kvrpcpb::RawBatchGetRequest),
    RawPut(super::kvrpcpb::RawPutRequest),
    RawBatchPut(super::kvrpcpb::RawBatchPutRequest),
    RawDelete(super::kvrpcpb::RawDeleteRequest),
    RawBatchDelete(super::kvrpcpb::RawBatchDeleteRequest),
    RawScan(super::kvrpcpb::RawScanRequest),
    RawDeleteRange(super::kvrpcpb::RawDeleteRangeRequest),
    RawBatchScan(super::kvrpcpb::RawBatchScanRequest),
    Coprocessor(super::coprocessor::Request),
    PessimisticLock(super::kvrpcpb::PessimisticLockRequest),
    PessimisticRollback(super::kvrpcpb::PessimisticRollbackRequest),
}

impl crate::text::PbPrint for BatchCommandsRequest_Request_oneof_cmd {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            BatchCommandsRequest_Request_oneof_cmd::Get(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Scan(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Prewrite(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Commit(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Import(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Cleanup(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::BatchGet(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::BatchRollback(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::ScanLock(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::ResolveLock(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::GC(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::DeleteRange(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawGet(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawPut(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawDelete(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawScan(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Coprocessor(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(v) => crate::text::PbPrint::fmt(v, name, buf),
        }
    }
}

impl BatchCommandsRequest_Request {
    pub fn new() -> BatchCommandsRequest_Request {
        ::std::default::Default::default()
    }

    // .kvrpcpb.GetRequest Get = 1;

    pub fn clear_Get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Get(&mut self, v: super::kvrpcpb::GetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Get(&mut self) -> &mut super::kvrpcpb::GetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(super::kvrpcpb::GetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Get(&mut self) -> super::kvrpcpb::GetRequest {
        if self.has_Get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GetRequest::new()
        }
    }

    pub fn get_Get(&self) -> &super::kvrpcpb::GetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(ref v)) => v,
            _ => super::kvrpcpb::GetRequest::default_instance(),
        }
    }

    // .kvrpcpb.ScanRequest Scan = 2;

    pub fn clear_Scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Scan(&mut self, v: super::kvrpcpb::ScanRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Scan(&mut self) -> &mut super::kvrpcpb::ScanRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(super::kvrpcpb::ScanRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Scan(&mut self) -> super::kvrpcpb::ScanRequest {
        if self.has_Scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanRequest::new()
        }
    }

    pub fn get_Scan(&self) -> &super::kvrpcpb::ScanRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(ref v)) => v,
            _ => super::kvrpcpb::ScanRequest::default_instance(),
        }
    }

    // .kvrpcpb.PrewriteRequest Prewrite = 3;

    pub fn clear_Prewrite(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Prewrite(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Prewrite(&mut self, v: super::kvrpcpb::PrewriteRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Prewrite(&mut self) -> &mut super::kvrpcpb::PrewriteRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(super::kvrpcpb::PrewriteRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Prewrite(&mut self) -> super::kvrpcpb::PrewriteRequest {
        if self.has_Prewrite() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PrewriteRequest::new()
        }
    }

    pub fn get_Prewrite(&self) -> &super::kvrpcpb::PrewriteRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v)) => v,
            _ => super::kvrpcpb::PrewriteRequest::default_instance(),
        }
    }

    // .kvrpcpb.CommitRequest Commit = 4;

    pub fn clear_Commit(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Commit(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Commit(&mut self, v: super::kvrpcpb::CommitRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Commit(&mut self) -> &mut super::kvrpcpb::CommitRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(super::kvrpcpb::CommitRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Commit(&mut self) -> super::kvrpcpb::CommitRequest {
        if self.has_Commit() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CommitRequest::new()
        }
    }

    pub fn get_Commit(&self) -> &super::kvrpcpb::CommitRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(ref v)) => v,
            _ => super::kvrpcpb::CommitRequest::default_instance(),
        }
    }

    // .kvrpcpb.ImportRequest Import = 5;

    pub fn clear_Import(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Import(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Import(&mut self, v: super::kvrpcpb::ImportRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Import(&mut self) -> &mut super::kvrpcpb::ImportRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(super::kvrpcpb::ImportRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Import(&mut self) -> super::kvrpcpb::ImportRequest {
        if self.has_Import() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ImportRequest::new()
        }
    }

    pub fn get_Import(&self) -> &super::kvrpcpb::ImportRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(ref v)) => v,
            _ => super::kvrpcpb::ImportRequest::default_instance(),
        }
    }

    // .kvrpcpb.CleanupRequest Cleanup = 6;

    pub fn clear_Cleanup(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Cleanup(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Cleanup(&mut self, v: super::kvrpcpb::CleanupRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Cleanup(&mut self) -> &mut super::kvrpcpb::CleanupRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(super::kvrpcpb::CleanupRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Cleanup(&mut self) -> super::kvrpcpb::CleanupRequest {
        if self.has_Cleanup() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CleanupRequest::new()
        }
    }

    pub fn get_Cleanup(&self) -> &super::kvrpcpb::CleanupRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v)) => v,
            _ => super::kvrpcpb::CleanupRequest::default_instance(),
        }
    }

    // .kvrpcpb.BatchGetRequest BatchGet = 7;

    pub fn clear_BatchGet(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_BatchGet(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BatchGet(&mut self, v: super::kvrpcpb::BatchGetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BatchGet(&mut self) -> &mut super::kvrpcpb::BatchGetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(super::kvrpcpb::BatchGetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BatchGet(&mut self) -> super::kvrpcpb::BatchGetRequest {
        if self.has_BatchGet() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchGetRequest::new()
        }
    }

    pub fn get_BatchGet(&self) -> &super::kvrpcpb::BatchGetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v)) => v,
            _ => super::kvrpcpb::BatchGetRequest::default_instance(),
        }
    }

    // .kvrpcpb.BatchRollbackRequest BatchRollback = 8;

    pub fn clear_BatchRollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_BatchRollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BatchRollback(&mut self, v: super::kvrpcpb::BatchRollbackRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BatchRollback(&mut self) -> &mut super::kvrpcpb::BatchRollbackRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(super::kvrpcpb::BatchRollbackRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BatchRollback(&mut self) -> super::kvrpcpb::BatchRollbackRequest {
        if self.has_BatchRollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchRollbackRequest::new()
        }
    }

    pub fn get_BatchRollback(&self) -> &super::kvrpcpb::BatchRollbackRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v)) => v,
            _ => super::kvrpcpb::BatchRollbackRequest::default_instance(),
        }
    }

    // .kvrpcpb.ScanLockRequest ScanLock = 9;

    pub fn clear_ScanLock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_ScanLock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ScanLock(&mut self, v: super::kvrpcpb::ScanLockRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ScanLock(&mut self) -> &mut super::kvrpcpb::ScanLockRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(super::kvrpcpb::ScanLockRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ScanLock(&mut self) -> super::kvrpcpb::ScanLockRequest {
        if self.has_ScanLock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanLockRequest::new()
        }
    }

    pub fn get_ScanLock(&self) -> &super::kvrpcpb::ScanLockRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v)) => v,
            _ => super::kvrpcpb::ScanLockRequest::default_instance(),
        }
    }

    // .kvrpcpb.ResolveLockRequest ResolveLock = 10;

    pub fn clear_ResolveLock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_ResolveLock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ResolveLock(&mut self, v: super::kvrpcpb::ResolveLockRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ResolveLock(&mut self) -> &mut super::kvrpcpb::ResolveLockRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(super::kvrpcpb::ResolveLockRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ResolveLock(&mut self) -> super::kvrpcpb::ResolveLockRequest {
        if self.has_ResolveLock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ResolveLockRequest::new()
        }
    }

    pub fn get_ResolveLock(&self) -> &super::kvrpcpb::ResolveLockRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v)) => v,
            _ => super::kvrpcpb::ResolveLockRequest::default_instance(),
        }
    }

    // .kvrpcpb.GCRequest GC = 11;

    pub fn clear_GC(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_GC(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GC(&mut self, v: super::kvrpcpb::GCRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GC(&mut self) -> &mut super::kvrpcpb::GCRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(super::kvrpcpb::GCRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GC(&mut self) -> super::kvrpcpb::GCRequest {
        if self.has_GC() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GCRequest::new()
        }
    }

    pub fn get_GC(&self) -> &super::kvrpcpb::GCRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(ref v)) => v,
            _ => super::kvrpcpb::GCRequest::default_instance(),
        }
    }

    // .kvrpcpb.DeleteRangeRequest DeleteRange = 12;

    pub fn clear_DeleteRange(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_DeleteRange(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DeleteRange(&mut self, v: super::kvrpcpb::DeleteRangeRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DeleteRange(&mut self) -> &mut super::kvrpcpb::DeleteRangeRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(super::kvrpcpb::DeleteRangeRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DeleteRange(&mut self) -> super::kvrpcpb::DeleteRangeRequest {
        if self.has_DeleteRange() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::DeleteRangeRequest::new()
        }
    }

    pub fn get_DeleteRange(&self) -> &super::kvrpcpb::DeleteRangeRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v)) => v,
            _ => super::kvrpcpb::DeleteRangeRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawGetRequest RawGet = 13;

    pub fn clear_RawGet(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawGet(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawGet(&mut self, v: super::kvrpcpb::RawGetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawGet(&mut self) -> &mut super::kvrpcpb::RawGetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(super::kvrpcpb::RawGetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawGet(&mut self) -> super::kvrpcpb::RawGetRequest {
        if self.has_RawGet() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawGetRequest::new()
        }
    }

    pub fn get_RawGet(&self) -> &super::kvrpcpb::RawGetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v)) => v,
            _ => super::kvrpcpb::RawGetRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchGetRequest RawBatchGet = 14;

    pub fn clear_RawBatchGet(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchGet(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchGet(&mut self, v: super::kvrpcpb::RawBatchGetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchGet(&mut self) -> &mut super::kvrpcpb::RawBatchGetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(super::kvrpcpb::RawBatchGetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchGet(&mut self) -> super::kvrpcpb::RawBatchGetRequest {
        if self.has_RawBatchGet() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchGetRequest::new()
        }
    }

    pub fn get_RawBatchGet(&self) -> &super::kvrpcpb::RawBatchGetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v)) => v,
            _ => super::kvrpcpb::RawBatchGetRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawPutRequest RawPut = 15;

    pub fn clear_RawPut(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawPut(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawPut(&mut self, v: super::kvrpcpb::RawPutRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawPut(&mut self) -> &mut super::kvrpcpb::RawPutRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(super::kvrpcpb::RawPutRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawPut(&mut self) -> super::kvrpcpb::RawPutRequest {
        if self.has_RawPut() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawPutRequest::new()
        }
    }

    pub fn get_RawPut(&self) -> &super::kvrpcpb::RawPutRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v)) => v,
            _ => super::kvrpcpb::RawPutRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchPutRequest RawBatchPut = 16;

    pub fn clear_RawBatchPut(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchPut(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchPut(&mut self, v: super::kvrpcpb::RawBatchPutRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchPut(&mut self) -> &mut super::kvrpcpb::RawBatchPutRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(super::kvrpcpb::RawBatchPutRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchPut(&mut self) -> super::kvrpcpb::RawBatchPutRequest {
        if self.has_RawBatchPut() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchPutRequest::new()
        }
    }

    pub fn get_RawBatchPut(&self) -> &super::kvrpcpb::RawBatchPutRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v)) => v,
            _ => super::kvrpcpb::RawBatchPutRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawDeleteRequest RawDelete = 17;

    pub fn clear_RawDelete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawDelete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawDelete(&mut self, v: super::kvrpcpb::RawDeleteRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawDelete(&mut self) -> &mut super::kvrpcpb::RawDeleteRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(super::kvrpcpb::RawDeleteRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawDelete(&mut self) -> super::kvrpcpb::RawDeleteRequest {
        if self.has_RawDelete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteRequest::new()
        }
    }

    pub fn get_RawDelete(&self) -> &super::kvrpcpb::RawDeleteRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchDeleteRequest RawBatchDelete = 18;

    pub fn clear_RawBatchDelete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchDelete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchDelete(&mut self, v: super::kvrpcpb::RawBatchDeleteRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchDelete(&mut self) -> &mut super::kvrpcpb::RawBatchDeleteRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(super::kvrpcpb::RawBatchDeleteRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchDelete(&mut self) -> super::kvrpcpb::RawBatchDeleteRequest {
        if self.has_RawBatchDelete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchDeleteRequest::new()
        }
    }

    pub fn get_RawBatchDelete(&self) -> &super::kvrpcpb::RawBatchDeleteRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v)) => v,
            _ => super::kvrpcpb::RawBatchDeleteRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawScanRequest RawScan = 19;

    pub fn clear_RawScan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawScan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawScan(&mut self, v: super::kvrpcpb::RawScanRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawScan(&mut self) -> &mut super::kvrpcpb::RawScanRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(super::kvrpcpb::RawScanRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawScan(&mut self) -> super::kvrpcpb::RawScanRequest {
        if self.has_RawScan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawScanRequest::new()
        }
    }

    pub fn get_RawScan(&self) -> &super::kvrpcpb::RawScanRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v)) => v,
            _ => super::kvrpcpb::RawScanRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawDeleteRangeRequest RawDeleteRange = 20;

    pub fn clear_RawDeleteRange(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawDeleteRange(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawDeleteRange(&mut self, v: super::kvrpcpb::RawDeleteRangeRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawDeleteRange(&mut self) -> &mut super::kvrpcpb::RawDeleteRangeRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(super::kvrpcpb::RawDeleteRangeRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawDeleteRange(&mut self) -> super::kvrpcpb::RawDeleteRangeRequest {
        if self.has_RawDeleteRange() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteRangeRequest::new()
        }
    }

    pub fn get_RawDeleteRange(&self) -> &super::kvrpcpb::RawDeleteRangeRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteRangeRequest::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchScanRequest RawBatchScan = 21;

    pub fn clear_RawBatchScan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchScan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchScan(&mut self, v: super::kvrpcpb::RawBatchScanRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchScan(&mut self) -> &mut super::kvrpcpb::RawBatchScanRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(super::kvrpcpb::RawBatchScanRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchScan(&mut self) -> super::kvrpcpb::RawBatchScanRequest {
        if self.has_RawBatchScan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchScanRequest::new()
        }
    }

    pub fn get_RawBatchScan(&self) -> &super::kvrpcpb::RawBatchScanRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v)) => v,
            _ => super::kvrpcpb::RawBatchScanRequest::default_instance(),
        }
    }

    // .coprocessor.Request Coprocessor = 22;

    pub fn clear_Coprocessor(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Coprocessor(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Coprocessor(&mut self, v: super::coprocessor::Request) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Coprocessor(&mut self) -> &mut super::coprocessor::Request {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(super::coprocessor::Request::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Coprocessor(&mut self) -> super::coprocessor::Request {
        if self.has_Coprocessor() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(v)) => v,
                _ => panic!(),
            }
        } else {
            super::coprocessor::Request::new()
        }
    }

    pub fn get_Coprocessor(&self) -> &super::coprocessor::Request {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v)) => v,
            _ => super::coprocessor::Request::default_instance(),
        }
    }

    // .kvrpcpb.PessimisticLockRequest PessimisticLock = 23;

    pub fn clear_PessimisticLock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_PessimisticLock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PessimisticLock(&mut self, v: super::kvrpcpb::PessimisticLockRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PessimisticLock(&mut self) -> &mut super::kvrpcpb::PessimisticLockRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(super::kvrpcpb::PessimisticLockRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PessimisticLock(&mut self) -> super::kvrpcpb::PessimisticLockRequest {
        if self.has_PessimisticLock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticLockRequest::new()
        }
    }

    pub fn get_PessimisticLock(&self) -> &super::kvrpcpb::PessimisticLockRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v)) => v,
            _ => super::kvrpcpb::PessimisticLockRequest::default_instance(),
        }
    }

    // .kvrpcpb.PessimisticRollbackRequest PessimisticRollback = 24;

    pub fn clear_PessimisticRollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_PessimisticRollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PessimisticRollback(&mut self, v: super::kvrpcpb::PessimisticRollbackRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PessimisticRollback(&mut self) -> &mut super::kvrpcpb::PessimisticRollbackRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(super::kvrpcpb::PessimisticRollbackRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PessimisticRollback(&mut self) -> super::kvrpcpb::PessimisticRollbackRequest {
        if self.has_PessimisticRollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticRollbackRequest::new()
        }
    }

    pub fn get_PessimisticRollback(&self) -> &super::kvrpcpb::PessimisticRollbackRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v)) => v,
            _ => super::kvrpcpb::PessimisticRollbackRequest::default_instance(),
        }
    }
}

impl ::protobuf::Message for BatchCommandsRequest_Request {
    fn is_initialized(&self) -> bool {
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Get(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Scan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Commit(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Import(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::GC(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::GC(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(is.read_message()?));
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(is.read_message()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(is.read_message()?));
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(is.read_message()?));
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsRequest_Request_oneof_cmd::Get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Scan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Commit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Import(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::GC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsRequest_Request_oneof_cmd::Get(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Scan(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Commit(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Import(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::GC(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v) => {
                    os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v) => {
                    os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v) => {
                    os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v) => {
                    os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v) => {
                    os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v) => {
                    os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v) => {
                    os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsRequest_Request {
        BatchCommandsRequest_Request::new()
    }

    fn default_instance() -> &'static BatchCommandsRequest_Request {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsRequest_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsRequest_Request,
        };
        unsafe {
            instance.get(BatchCommandsRequest_Request::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsRequest_Request {
    fn clear(&mut self) {
        self.clear_Get();
        self.clear_Scan();
        self.clear_Prewrite();
        self.clear_Commit();
        self.clear_Import();
        self.clear_Cleanup();
        self.clear_BatchGet();
        self.clear_BatchRollback();
        self.clear_ScanLock();
        self.clear_ResolveLock();
        self.clear_GC();
        self.clear_DeleteRange();
        self.clear_RawGet();
        self.clear_RawBatchGet();
        self.clear_RawPut();
        self.clear_RawBatchPut();
        self.clear_RawDelete();
        self.clear_RawBatchDelete();
        self.clear_RawScan();
        self.clear_RawDeleteRange();
        self.clear_RawBatchScan();
        self.clear_Coprocessor();
        self.clear_PessimisticLock();
        self.clear_PessimisticRollback();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BatchCommandsRequest_Request {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cmd, "cmd", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsRequest_Request {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cmd, "cmd", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsRequest_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsResponse {
    // message fields
    pub responses: ::protobuf::RepeatedField<BatchCommandsResponse_Response>,
    pub request_ids: ::std::vec::Vec<u64>,
    pub transport_layer_load: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BatchCommandsResponse {
    pub fn new() -> BatchCommandsResponse {
        ::std::default::Default::default()
    }

    // repeated .tikvpb.BatchCommandsResponse.Response responses = 1;

    pub fn clear_responses(&mut self) {
        self.responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_responses(&mut self, v: ::protobuf::RepeatedField<BatchCommandsResponse_Response>) {
        self.responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_responses(&mut self) -> &mut ::protobuf::RepeatedField<BatchCommandsResponse_Response> {
        &mut self.responses
    }

    // Take field
    pub fn take_responses(&mut self) -> ::protobuf::RepeatedField<BatchCommandsResponse_Response> {
        ::std::mem::replace(&mut self.responses, ::protobuf::RepeatedField::new())
    }

    pub fn get_responses(&self) -> &[BatchCommandsResponse_Response] {
        &self.responses
    }

    // repeated uint64 request_ids = 2;

    pub fn clear_request_ids(&mut self) {
        self.request_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.request_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.request_ids
    }

    // Take field
    pub fn take_request_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.request_ids, ::std::vec::Vec::new())
    }

    pub fn get_request_ids(&self) -> &[u64] {
        &self.request_ids
    }

    // uint64 transport_layer_load = 3;

    pub fn clear_transport_layer_load(&mut self) {
        self.transport_layer_load = 0;
    }

    // Param is passed by value, moved
    pub fn set_transport_layer_load(&mut self, v: u64) {
        self.transport_layer_load = v;
    }

    pub fn get_transport_layer_load(&self) -> u64 {
        self.transport_layer_load
    }
}

impl ::protobuf::Message for BatchCommandsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.responses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.responses)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.request_ids)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.transport_layer_load = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.request_ids {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.transport_layer_load != 0 {
            my_size += ::protobuf::rt::value_size(3, self.transport_layer_load, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.responses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.request_ids {
            os.write_uint64(2, *v)?;
        };
        if self.transport_layer_load != 0 {
            os.write_uint64(3, self.transport_layer_load)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsResponse {
        BatchCommandsResponse::new()
    }

    fn default_instance() -> &'static BatchCommandsResponse {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsResponse,
        };
        unsafe {
            instance.get(BatchCommandsResponse::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsResponse {
    fn clear(&mut self) {
        self.clear_responses();
        self.clear_request_ids();
        self.clear_transport_layer_load();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BatchCommandsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.responses, "responses", buf);
        crate::text::PbPrint::fmt(&self.request_ids, "request_ids", buf);
        crate::text::PbPrint::fmt(&self.transport_layer_load, "transport_layer_load", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.responses, "responses", &mut s);
        crate::text::PbPrint::fmt(&self.request_ids, "request_ids", &mut s);
        crate::text::PbPrint::fmt(&self.transport_layer_load, "transport_layer_load", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsResponse_Response {
    // message oneof groups
    pub cmd: ::std::option::Option<BatchCommandsResponse_Response_oneof_cmd>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum BatchCommandsResponse_Response_oneof_cmd {
    Get(super::kvrpcpb::GetResponse),
    Scan(super::kvrpcpb::ScanResponse),
    Prewrite(super::kvrpcpb::PrewriteResponse),
    Commit(super::kvrpcpb::CommitResponse),
    Import(super::kvrpcpb::ImportResponse),
    Cleanup(super::kvrpcpb::CleanupResponse),
    BatchGet(super::kvrpcpb::BatchGetResponse),
    BatchRollback(super::kvrpcpb::BatchRollbackResponse),
    ScanLock(super::kvrpcpb::ScanLockResponse),
    ResolveLock(super::kvrpcpb::ResolveLockResponse),
    GC(super::kvrpcpb::GCResponse),
    DeleteRange(super::kvrpcpb::DeleteRangeResponse),
    RawGet(super::kvrpcpb::RawGetResponse),
    RawBatchGet(super::kvrpcpb::RawBatchGetResponse),
    RawPut(super::kvrpcpb::RawPutResponse),
    RawBatchPut(super::kvrpcpb::RawBatchPutResponse),
    RawDelete(super::kvrpcpb::RawDeleteResponse),
    RawBatchDelete(super::kvrpcpb::RawBatchDeleteResponse),
    RawScan(super::kvrpcpb::RawScanResponse),
    RawDeleteRange(super::kvrpcpb::RawDeleteRangeResponse),
    RawBatchScan(super::kvrpcpb::RawBatchScanResponse),
    Coprocessor(super::coprocessor::Response),
    PessimisticLock(super::kvrpcpb::PessimisticLockResponse),
    PessimisticRollback(super::kvrpcpb::PessimisticRollbackResponse),
}

impl crate::text::PbPrint for BatchCommandsResponse_Response_oneof_cmd {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            BatchCommandsResponse_Response_oneof_cmd::Get(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Scan(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Prewrite(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Commit(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Import(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Cleanup(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::BatchGet(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::BatchRollback(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::ScanLock(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::ResolveLock(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::GC(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::DeleteRange(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawGet(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawPut(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawDelete(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawScan(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Coprocessor(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(v) => crate::text::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(v) => crate::text::PbPrint::fmt(v, name, buf),
        }
    }
}

impl BatchCommandsResponse_Response {
    pub fn new() -> BatchCommandsResponse_Response {
        ::std::default::Default::default()
    }

    // .kvrpcpb.GetResponse Get = 1;

    pub fn clear_Get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Get(&mut self, v: super::kvrpcpb::GetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Get(&mut self) -> &mut super::kvrpcpb::GetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(super::kvrpcpb::GetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Get(&mut self) -> super::kvrpcpb::GetResponse {
        if self.has_Get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GetResponse::new()
        }
    }

    pub fn get_Get(&self) -> &super::kvrpcpb::GetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(ref v)) => v,
            _ => super::kvrpcpb::GetResponse::default_instance(),
        }
    }

    // .kvrpcpb.ScanResponse Scan = 2;

    pub fn clear_Scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Scan(&mut self, v: super::kvrpcpb::ScanResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Scan(&mut self) -> &mut super::kvrpcpb::ScanResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(super::kvrpcpb::ScanResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Scan(&mut self) -> super::kvrpcpb::ScanResponse {
        if self.has_Scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanResponse::new()
        }
    }

    pub fn get_Scan(&self) -> &super::kvrpcpb::ScanResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(ref v)) => v,
            _ => super::kvrpcpb::ScanResponse::default_instance(),
        }
    }

    // .kvrpcpb.PrewriteResponse Prewrite = 3;

    pub fn clear_Prewrite(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Prewrite(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Prewrite(&mut self, v: super::kvrpcpb::PrewriteResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Prewrite(&mut self) -> &mut super::kvrpcpb::PrewriteResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(super::kvrpcpb::PrewriteResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Prewrite(&mut self) -> super::kvrpcpb::PrewriteResponse {
        if self.has_Prewrite() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PrewriteResponse::new()
        }
    }

    pub fn get_Prewrite(&self) -> &super::kvrpcpb::PrewriteResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v)) => v,
            _ => super::kvrpcpb::PrewriteResponse::default_instance(),
        }
    }

    // .kvrpcpb.CommitResponse Commit = 4;

    pub fn clear_Commit(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Commit(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Commit(&mut self, v: super::kvrpcpb::CommitResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Commit(&mut self) -> &mut super::kvrpcpb::CommitResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(super::kvrpcpb::CommitResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Commit(&mut self) -> super::kvrpcpb::CommitResponse {
        if self.has_Commit() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CommitResponse::new()
        }
    }

    pub fn get_Commit(&self) -> &super::kvrpcpb::CommitResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(ref v)) => v,
            _ => super::kvrpcpb::CommitResponse::default_instance(),
        }
    }

    // .kvrpcpb.ImportResponse Import = 5;

    pub fn clear_Import(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Import(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Import(&mut self, v: super::kvrpcpb::ImportResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Import(&mut self) -> &mut super::kvrpcpb::ImportResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(super::kvrpcpb::ImportResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Import(&mut self) -> super::kvrpcpb::ImportResponse {
        if self.has_Import() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ImportResponse::new()
        }
    }

    pub fn get_Import(&self) -> &super::kvrpcpb::ImportResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(ref v)) => v,
            _ => super::kvrpcpb::ImportResponse::default_instance(),
        }
    }

    // .kvrpcpb.CleanupResponse Cleanup = 6;

    pub fn clear_Cleanup(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Cleanup(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Cleanup(&mut self, v: super::kvrpcpb::CleanupResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Cleanup(&mut self) -> &mut super::kvrpcpb::CleanupResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(super::kvrpcpb::CleanupResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Cleanup(&mut self) -> super::kvrpcpb::CleanupResponse {
        if self.has_Cleanup() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CleanupResponse::new()
        }
    }

    pub fn get_Cleanup(&self) -> &super::kvrpcpb::CleanupResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v)) => v,
            _ => super::kvrpcpb::CleanupResponse::default_instance(),
        }
    }

    // .kvrpcpb.BatchGetResponse BatchGet = 7;

    pub fn clear_BatchGet(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_BatchGet(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BatchGet(&mut self, v: super::kvrpcpb::BatchGetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BatchGet(&mut self) -> &mut super::kvrpcpb::BatchGetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(super::kvrpcpb::BatchGetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BatchGet(&mut self) -> super::kvrpcpb::BatchGetResponse {
        if self.has_BatchGet() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchGetResponse::new()
        }
    }

    pub fn get_BatchGet(&self) -> &super::kvrpcpb::BatchGetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v)) => v,
            _ => super::kvrpcpb::BatchGetResponse::default_instance(),
        }
    }

    // .kvrpcpb.BatchRollbackResponse BatchRollback = 8;

    pub fn clear_BatchRollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_BatchRollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BatchRollback(&mut self, v: super::kvrpcpb::BatchRollbackResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BatchRollback(&mut self) -> &mut super::kvrpcpb::BatchRollbackResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(super::kvrpcpb::BatchRollbackResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BatchRollback(&mut self) -> super::kvrpcpb::BatchRollbackResponse {
        if self.has_BatchRollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchRollbackResponse::new()
        }
    }

    pub fn get_BatchRollback(&self) -> &super::kvrpcpb::BatchRollbackResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v)) => v,
            _ => super::kvrpcpb::BatchRollbackResponse::default_instance(),
        }
    }

    // .kvrpcpb.ScanLockResponse ScanLock = 9;

    pub fn clear_ScanLock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_ScanLock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ScanLock(&mut self, v: super::kvrpcpb::ScanLockResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ScanLock(&mut self) -> &mut super::kvrpcpb::ScanLockResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(super::kvrpcpb::ScanLockResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ScanLock(&mut self) -> super::kvrpcpb::ScanLockResponse {
        if self.has_ScanLock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanLockResponse::new()
        }
    }

    pub fn get_ScanLock(&self) -> &super::kvrpcpb::ScanLockResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v)) => v,
            _ => super::kvrpcpb::ScanLockResponse::default_instance(),
        }
    }

    // .kvrpcpb.ResolveLockResponse ResolveLock = 10;

    pub fn clear_ResolveLock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_ResolveLock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ResolveLock(&mut self, v: super::kvrpcpb::ResolveLockResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ResolveLock(&mut self) -> &mut super::kvrpcpb::ResolveLockResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(super::kvrpcpb::ResolveLockResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ResolveLock(&mut self) -> super::kvrpcpb::ResolveLockResponse {
        if self.has_ResolveLock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ResolveLockResponse::new()
        }
    }

    pub fn get_ResolveLock(&self) -> &super::kvrpcpb::ResolveLockResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v)) => v,
            _ => super::kvrpcpb::ResolveLockResponse::default_instance(),
        }
    }

    // .kvrpcpb.GCResponse GC = 11;

    pub fn clear_GC(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_GC(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GC(&mut self, v: super::kvrpcpb::GCResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GC(&mut self) -> &mut super::kvrpcpb::GCResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(super::kvrpcpb::GCResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GC(&mut self) -> super::kvrpcpb::GCResponse {
        if self.has_GC() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GCResponse::new()
        }
    }

    pub fn get_GC(&self) -> &super::kvrpcpb::GCResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(ref v)) => v,
            _ => super::kvrpcpb::GCResponse::default_instance(),
        }
    }

    // .kvrpcpb.DeleteRangeResponse DeleteRange = 12;

    pub fn clear_DeleteRange(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_DeleteRange(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DeleteRange(&mut self, v: super::kvrpcpb::DeleteRangeResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DeleteRange(&mut self) -> &mut super::kvrpcpb::DeleteRangeResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(super::kvrpcpb::DeleteRangeResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DeleteRange(&mut self) -> super::kvrpcpb::DeleteRangeResponse {
        if self.has_DeleteRange() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::DeleteRangeResponse::new()
        }
    }

    pub fn get_DeleteRange(&self) -> &super::kvrpcpb::DeleteRangeResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v)) => v,
            _ => super::kvrpcpb::DeleteRangeResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawGetResponse RawGet = 13;

    pub fn clear_RawGet(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawGet(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawGet(&mut self, v: super::kvrpcpb::RawGetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawGet(&mut self) -> &mut super::kvrpcpb::RawGetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(super::kvrpcpb::RawGetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawGet(&mut self) -> super::kvrpcpb::RawGetResponse {
        if self.has_RawGet() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawGetResponse::new()
        }
    }

    pub fn get_RawGet(&self) -> &super::kvrpcpb::RawGetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v)) => v,
            _ => super::kvrpcpb::RawGetResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchGetResponse RawBatchGet = 14;

    pub fn clear_RawBatchGet(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchGet(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchGet(&mut self, v: super::kvrpcpb::RawBatchGetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchGet(&mut self) -> &mut super::kvrpcpb::RawBatchGetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(super::kvrpcpb::RawBatchGetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchGet(&mut self) -> super::kvrpcpb::RawBatchGetResponse {
        if self.has_RawBatchGet() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchGetResponse::new()
        }
    }

    pub fn get_RawBatchGet(&self) -> &super::kvrpcpb::RawBatchGetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v)) => v,
            _ => super::kvrpcpb::RawBatchGetResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawPutResponse RawPut = 15;

    pub fn clear_RawPut(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawPut(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawPut(&mut self, v: super::kvrpcpb::RawPutResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawPut(&mut self) -> &mut super::kvrpcpb::RawPutResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(super::kvrpcpb::RawPutResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawPut(&mut self) -> super::kvrpcpb::RawPutResponse {
        if self.has_RawPut() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawPutResponse::new()
        }
    }

    pub fn get_RawPut(&self) -> &super::kvrpcpb::RawPutResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v)) => v,
            _ => super::kvrpcpb::RawPutResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchPutResponse RawBatchPut = 16;

    pub fn clear_RawBatchPut(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchPut(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchPut(&mut self, v: super::kvrpcpb::RawBatchPutResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchPut(&mut self) -> &mut super::kvrpcpb::RawBatchPutResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(super::kvrpcpb::RawBatchPutResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchPut(&mut self) -> super::kvrpcpb::RawBatchPutResponse {
        if self.has_RawBatchPut() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchPutResponse::new()
        }
    }

    pub fn get_RawBatchPut(&self) -> &super::kvrpcpb::RawBatchPutResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v)) => v,
            _ => super::kvrpcpb::RawBatchPutResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawDeleteResponse RawDelete = 17;

    pub fn clear_RawDelete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawDelete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawDelete(&mut self, v: super::kvrpcpb::RawDeleteResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawDelete(&mut self) -> &mut super::kvrpcpb::RawDeleteResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(super::kvrpcpb::RawDeleteResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawDelete(&mut self) -> super::kvrpcpb::RawDeleteResponse {
        if self.has_RawDelete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteResponse::new()
        }
    }

    pub fn get_RawDelete(&self) -> &super::kvrpcpb::RawDeleteResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchDeleteResponse RawBatchDelete = 18;

    pub fn clear_RawBatchDelete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchDelete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchDelete(&mut self, v: super::kvrpcpb::RawBatchDeleteResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchDelete(&mut self) -> &mut super::kvrpcpb::RawBatchDeleteResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(super::kvrpcpb::RawBatchDeleteResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchDelete(&mut self) -> super::kvrpcpb::RawBatchDeleteResponse {
        if self.has_RawBatchDelete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchDeleteResponse::new()
        }
    }

    pub fn get_RawBatchDelete(&self) -> &super::kvrpcpb::RawBatchDeleteResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v)) => v,
            _ => super::kvrpcpb::RawBatchDeleteResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawScanResponse RawScan = 19;

    pub fn clear_RawScan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawScan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawScan(&mut self, v: super::kvrpcpb::RawScanResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawScan(&mut self) -> &mut super::kvrpcpb::RawScanResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(super::kvrpcpb::RawScanResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawScan(&mut self) -> super::kvrpcpb::RawScanResponse {
        if self.has_RawScan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawScanResponse::new()
        }
    }

    pub fn get_RawScan(&self) -> &super::kvrpcpb::RawScanResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v)) => v,
            _ => super::kvrpcpb::RawScanResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawDeleteRangeResponse RawDeleteRange = 20;

    pub fn clear_RawDeleteRange(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawDeleteRange(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawDeleteRange(&mut self, v: super::kvrpcpb::RawDeleteRangeResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawDeleteRange(&mut self) -> &mut super::kvrpcpb::RawDeleteRangeResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(super::kvrpcpb::RawDeleteRangeResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawDeleteRange(&mut self) -> super::kvrpcpb::RawDeleteRangeResponse {
        if self.has_RawDeleteRange() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteRangeResponse::new()
        }
    }

    pub fn get_RawDeleteRange(&self) -> &super::kvrpcpb::RawDeleteRangeResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteRangeResponse::default_instance(),
        }
    }

    // .kvrpcpb.RawBatchScanResponse RawBatchScan = 21;

    pub fn clear_RawBatchScan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_RawBatchScan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBatchScan(&mut self, v: super::kvrpcpb::RawBatchScanResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBatchScan(&mut self) -> &mut super::kvrpcpb::RawBatchScanResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(super::kvrpcpb::RawBatchScanResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBatchScan(&mut self) -> super::kvrpcpb::RawBatchScanResponse {
        if self.has_RawBatchScan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchScanResponse::new()
        }
    }

    pub fn get_RawBatchScan(&self) -> &super::kvrpcpb::RawBatchScanResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v)) => v,
            _ => super::kvrpcpb::RawBatchScanResponse::default_instance(),
        }
    }

    // .coprocessor.Response Coprocessor = 22;

    pub fn clear_Coprocessor(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Coprocessor(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Coprocessor(&mut self, v: super::coprocessor::Response) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Coprocessor(&mut self) -> &mut super::coprocessor::Response {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(super::coprocessor::Response::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Coprocessor(&mut self) -> super::coprocessor::Response {
        if self.has_Coprocessor() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(v)) => v,
                _ => panic!(),
            }
        } else {
            super::coprocessor::Response::new()
        }
    }

    pub fn get_Coprocessor(&self) -> &super::coprocessor::Response {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v)) => v,
            _ => super::coprocessor::Response::default_instance(),
        }
    }

    // .kvrpcpb.PessimisticLockResponse PessimisticLock = 23;

    pub fn clear_PessimisticLock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_PessimisticLock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PessimisticLock(&mut self, v: super::kvrpcpb::PessimisticLockResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PessimisticLock(&mut self) -> &mut super::kvrpcpb::PessimisticLockResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(super::kvrpcpb::PessimisticLockResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PessimisticLock(&mut self) -> super::kvrpcpb::PessimisticLockResponse {
        if self.has_PessimisticLock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticLockResponse::new()
        }
    }

    pub fn get_PessimisticLock(&self) -> &super::kvrpcpb::PessimisticLockResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v)) => v,
            _ => super::kvrpcpb::PessimisticLockResponse::default_instance(),
        }
    }

    // .kvrpcpb.PessimisticRollbackResponse PessimisticRollback = 24;

    pub fn clear_PessimisticRollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_PessimisticRollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PessimisticRollback(&mut self, v: super::kvrpcpb::PessimisticRollbackResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PessimisticRollback(&mut self) -> &mut super::kvrpcpb::PessimisticRollbackResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(super::kvrpcpb::PessimisticRollbackResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PessimisticRollback(&mut self) -> super::kvrpcpb::PessimisticRollbackResponse {
        if self.has_PessimisticRollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticRollbackResponse::new()
        }
    }

    pub fn get_PessimisticRollback(&self) -> &super::kvrpcpb::PessimisticRollbackResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v)) => v,
            _ => super::kvrpcpb::PessimisticRollbackResponse::default_instance(),
        }
    }
}

impl ::protobuf::Message for BatchCommandsResponse_Response {
    fn is_initialized(&self) -> bool {
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Get(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Scan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Commit(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Import(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::GC(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::GC(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(is.read_message()?));
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(is.read_message()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(is.read_message()?));
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(is.read_message()?));
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsResponse_Response_oneof_cmd::Get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Scan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Commit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Import(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::GC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsResponse_Response_oneof_cmd::Get(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Scan(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Commit(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Import(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::GC(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v) => {
                    os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v) => {
                    os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v) => {
                    os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v) => {
                    os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v) => {
                    os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v) => {
                    os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v) => {
                    os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsResponse_Response {
        BatchCommandsResponse_Response::new()
    }

    fn default_instance() -> &'static BatchCommandsResponse_Response {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsResponse_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsResponse_Response,
        };
        unsafe {
            instance.get(BatchCommandsResponse_Response::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsResponse_Response {
    fn clear(&mut self) {
        self.clear_Get();
        self.clear_Scan();
        self.clear_Prewrite();
        self.clear_Commit();
        self.clear_Import();
        self.clear_Cleanup();
        self.clear_BatchGet();
        self.clear_BatchRollback();
        self.clear_ScanLock();
        self.clear_ResolveLock();
        self.clear_GC();
        self.clear_DeleteRange();
        self.clear_RawGet();
        self.clear_RawBatchGet();
        self.clear_RawPut();
        self.clear_RawBatchPut();
        self.clear_RawDelete();
        self.clear_RawBatchDelete();
        self.clear_RawScan();
        self.clear_RawDeleteRange();
        self.clear_RawBatchScan();
        self.clear_Coprocessor();
        self.clear_PessimisticLock();
        self.clear_PessimisticRollback();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BatchCommandsResponse_Response {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cmd, "cmd", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsResponse_Response {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cmd, "cmd", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsResponse_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchRaftMessage {
    // message fields
    pub msgs: ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BatchRaftMessage {
    pub fn new() -> BatchRaftMessage {
        ::std::default::Default::default()
    }

    // repeated .raft_serverpb.RaftMessage msgs = 1;

    pub fn clear_msgs(&mut self) {
        self.msgs.clear();
    }

    // Param is passed by value, moved
    pub fn set_msgs(&mut self, v: ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage>) {
        self.msgs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msgs(&mut self) -> &mut ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage> {
        &mut self.msgs
    }

    // Take field
    pub fn take_msgs(&mut self) -> ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage> {
        ::std::mem::replace(&mut self.msgs, ::protobuf::RepeatedField::new())
    }

    pub fn get_msgs(&self) -> &[super::raft_serverpb::RaftMessage] {
        &self.msgs
    }
}

impl ::protobuf::Message for BatchRaftMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.msgs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.msgs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.msgs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.msgs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchRaftMessage {
        BatchRaftMessage::new()
    }

    fn default_instance() -> &'static BatchRaftMessage {
        static mut instance: ::protobuf::lazy::Lazy<BatchRaftMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchRaftMessage,
        };
        unsafe {
            instance.get(BatchRaftMessage::new)
        }
    }
}

impl ::protobuf::Clear for BatchRaftMessage {
    fn clear(&mut self) {
        self.clear_msgs();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BatchRaftMessage {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.msgs, "msgs", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchRaftMessage {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.msgs, "msgs", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchRaftMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
